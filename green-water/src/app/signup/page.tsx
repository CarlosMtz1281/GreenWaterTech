'use client'

import React, { useEffect, useState } from 'react';
import { Button, TextField, Alert, Stack, Typography, Paper } from '@mui/material';
import { firebaseConfig } from '../firebase/firebaseconfig';
import { initializeApp } from "firebase/app";
import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
import { getFirestore, getDoc, doc, setDoc } from 'firebase/firestore';


function SignupPage (){
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [Error, setError] = useState('');
    const [userId, setUserId] = useState('');
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setEmail(event.target.value);
    };

    const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setPassword(event.target.value);
    };

    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        console.log(`Submitting email: ${email} and password: ${password}`);

        // Create user in Firebase
        createUserWithEmailAndPassword(auth, email, password)
            .then(async (userCredential) => {
                // Signed in
                const user = userCredential.user;

                // TODO: Add a user to realtime database and retrieve the userid key generated by the response


                try {
                    const response = await fetch('https://greenwatertech-572bc-default-rtdb.firebaseio.com/Users/.json', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        cuadrante1: "0, 0",
                        cuadrante2: "0, 0",
                        cuadrante3: "0, 0",
                        cuadrante4: "0, 0",
                      }),
                    });

                    if (response.ok) {
                      const data = await response.json();
                      setUserId(data.name);
                      console.log('User added to Firebase with ID:', data.name);
                    } else {
                      console.error('Failed to add user to Firebase:', response.statusText);
                    }
                  } catch (error) {
                    console.error('Error adding user to Firebase:', error);
                  }

                // TODO: Add user's email: userid to firestore database (users collection)

                try {
                    const docRef = doc(db, "users", email);
                    console.log('docRef:', docRef);
                    const payload = { email: userId };
                    console.log('payload:', payload);
                    await setDoc(docRef, payload);
                    console.log('User added to Firestore with ID:', email);
                } catch (error) {
                    console.error('Error adding user to Firestore:', error);
                }

                const encodedEmail = encodeURIComponent(email);

                // Finally, redirect to the home page
                // window.location.href = `home/${encodedEmail}`;
            })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                setError(errorMessage);
            });


    };

    useEffect(() => {
        setTimeout(() => {
            setError('');
        }, 5000);
    }
    , [Error]);

    return (
        <div className='signcontainer'>

        <Paper elevation={5} style = {{height: "50vh", padding: 30}}>
        <form className = "formcontainer" onSubmit={handleSubmit}>

            <Stack spacing={3}>
            <Typography style = {{color:"black", fontWeight: "lighter"}} variant="h4">Register</Typography>
            <TextField
                required
                id="email"
                name="email"
                label="Email"
                type="email"
                value={email}
                onChange={handleEmailChange}
            />
            <TextField
                required
                id="password"
                name="password"
                label="Password"
                type="password"
                value={password}
                onChange={handlePasswordChange}
            />
            <Button className = "loginbtn" type="submit">Sign Up</Button>


            {Error !== '' && <Alert severity="error">{Error}</Alert>}
            </Stack>


        </form>
        </Paper>
        </div>
    );
};

export default SignupPage;
